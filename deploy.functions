#
AMILIST=$HOME/cloudformation/ami-inventory.txt
BHTEMPLATE=/tmp/${TEMPLATE}_$$.json
TMPFILE=/tmp/deploy_$$.tempfile
TMPFILE1=/tmp/tmpfile1_$$.log
TMPFILE2=/tmp/tmpfile2_$$.log

#
list_instances () {
aws ec2 describe-instances --query "Reservations[*].Instances[*].[InstanceId,Tags[?Key=='Name'].Value]" --output text --filters Name=instance-state-name,Values=running  --profile $PROF | sed 's/None$/None\n/' | sed '$!N;s/\n/ /'
}

select_ec2instance () {
   aws ec2 describe-instances --query "Reservations[*].Instances[*].[InstanceId,Tags[?Key=='Name'].Value,Placement.AvailabilityZone]" --output text --filters Name=instance-state-name,Values=running  --profile $PROF | sed 's/None$/None\n/' | sed '$!N;s/\n/ /' |  nl > $TMPFILE
   cat $TMPFILE
   echo "Pick an Instance: "
   read sel
   EC2INST=`head -n $sel $TMPFILE | tail -1 | awk '{print $2}'`
   EC2Zone=`head -n $sel $TMPFILE | tail -1 | awk '{print $3}'`
}

get_cloudinit_log () {
aws ec2 get-console-output --instance-id $INSTANCEID \
    --profile $PROF --output text
}

get_hosted_zone () {
HZONE=$(aws route53 list-hosted-zones-by-name --dns-name stanfordaws.edu \
   --query "HostedZones[].[Id,Name]" \
   --output text | awk '{print $1}' | awk -F"/" '{print $3}')
}
select_eip1 () {
   aws ec2 describe-addresses --profile $PROF --output text \
           --query Addresses[*].[PublicIp,AllocationId,InstanceId] | nl > $TMPFILE
   cat $TMPFILE
   echo "Pick an Elastic IP #1: "
   read sel
   EIP1=`head -n $sel $TMPFILE | tail -1 | awk '{print $3}'`
}

select_eip2 () {
   aws ec2 describe-addresses --profile $PROF --output text \
           --query Addresses[*].[PublicIp,AllocationId,InstanceId] | nl > $TMPFILE
   cat $TMPFILE
   echo "Pick an Elastic IP #2: "
   read sel
   EIP2=`head -n $sel $TMPFILE | tail -1 | awk '{print $3}'`
}

select_sslcert () {
    aws acm list-certificates --profile $PROF --output text \
       --query CertificateSummaryList[*].[CertificateArn,DomainName] | nl > $TMPFILE
    cat $TMPFILE
    echo "Pick a SSL Certificate: "
    read sel
    SSLCERT=`head -n $sel $TMPFILE | tail -1 | awk '{print $2}'`
}
list_stack () {
     aws cloudformation describe-stacks --profile $PROF \
          --query "Stacks[].StackName" --output text | tr '\t' '\n' | nl > $TMPFILE
     cat $TMPFILE
}
select_stack () {
     aws cloudformation describe-stacks --profile $PROF \
          --query "Stacks[].StackName" --output text | tr '\t' '\n' | nl > $TMPFILE
     cat $TMPFILE
     echo "Please select a Stack Name to delete:"
     read sel
     STACKNAME=`head -n $sel $TMPFILE | tail -1 | awk '{print $2}'`
}

select_vpcs () {
     aws ec2 describe-vpcs --profile $PROF --query 'Vpcs[*].[VpcId,Tags[?Key==`Name`]]' \
         --output text | sed 's/None$/None\n/' | sed '$!N;s/\n/ /' |nl >  $TMPFILE

     cat $TMPFILE
     echo "Please select a VPC:"
     read sel
     VPCID=`head -n $sel $TMPFILE | tail -1 | awk '{print $2}'`
     VPCNAME=`head -n $sel $TMPFILE | tail -1 | awk '{print $4}'`
}

get_servername () {
      echo "Enter the name of your server to be: "
      read SERVERNAME
      echo "Backup Server Tag (y/n): "
      read BACKUP
}

select_ami () {
   cat $AMILIST
   echo "Plese select an AMI: \c"
   read sel
   AMI=`head -n $sel $AMILIST | tail -1 | awk '{print $2}'`
}

#  Listing Subnet and Security Group
select_subnet () {

     aws ec2 describe-subnets --profile $PROF --filter "Name=vpc-id,Values=$VPCID" \
            --output=text | grep SUBNETS | awk '{ print $3 , $9, $10}' > $TMPFILE1

     aws ec2 describe-subnets --profile $PROF --filter "Name=vpc-id,Values=$VPCID" \
         --output=text | grep TAGS | grep Name |  awk '{ print $1, $3}' > $TMPFILE2

     paste -d " " $TMPFILE1 $TMPFILE2 | nl > $TMPFILE

     cat $TMPFILE
     echo "Please select a Subnet for this instance: "
     read sel
     SN=`head -n $sel $TMPFILE | tail -1 | awk '{print $3}'`
}

select_sgroup () {
     aws ec2 describe-security-groups --profile $PROF \
         --query 'SecurityGroups[*].{GroupName:GroupName,GroupId:GroupId}' \
         --output=text --filters "Name=vpc-id,Values=$VPCID" | tr -s '\t' ' ' | nl > $TMPFILE

     cat $TMPFILE
     echo "Please select a Security Group:"
     read sel
     SG=`head -n $sel $TMPFILE | tail -1 | awk '{print $2}'`
}

select_sg_elb () {
     aws ec2 describe-security-groups --profile $PROF \
         --query 'SecurityGroups[*].{GroupName:GroupName,GroupId:GroupId}' \
         --output=text --filters "Name=vpc-id,Values=$VPCID" | tr -s '\t' ' ' | nl > $TMPFILE

     cat $TMPFILE
     echo "Please select a Security Group for ELB:"
     read sel
     ELBSG=`head -n $sel $TMPFILE | tail -1 | awk '{print $2}'`
}

select_efs () {
     aws efs describe-file-systems --profile=$PROF \
        --query "FileSystems[*].[Name,FileSystemId]" --output text | tr -s '\t' ' ' | nl > $TMPFILE
     cat $TMPFILE
     echo "Please select an EFS filesystem :"
     read sel
     EFSFILE=`head -n $sel $TMPFILE | tail -1 | awk '{print $2}'`
     
}

select_postefs () {
     aws efs describe-file-systems --profile $PROF \
         --query 'FileSystems[].[FileSystemId,Name]' --output text | nl > $TMPFILE

     cat $TMPFILE
     echo "Please select a EFS PostBoot FileSystem:"
     read sel
     EFS=`head -n $sel $TMPFILE | tail -1 | awk '{print $2}'`
}

select_inst_type () {
    cat <<END >$TMPFILE
    1.  t2.micro  (1/1)
    2.  t2.small  (1/2)
    3.  t2.medium (2/4)
    4.  t2.large  (2/8)
    5.  t2.xlarge (4/16)
END
    cat $TMPFILE
    echo "Please select an instance type:"
    read sel
    INSTTYPE=`head -n $sel $TMPFILE | tail -1 | awk '{print $2}'`

}

select_eip () {
     aws ec2 describe-addresses --profile cia-admin --output text \
          --query Addresses[*].[PublicIp,AllocationId,InstanceId] | nl > $TMPFILE
     cat $TMPFILE
     echo "Please select an Elastic IP: "
     read sel
     EIP=`head -n $sel $TMPFILE | tail -1 | awk '{print $3}'`
}
#  end of functions
